require 'digest'
class Admin < ActiveRecord::Base
  extend ActiveSupport::Memoizable

  has_many :leagues, :primary_key => "league_id", :foreign_key => "id"
  has_many :challenges, :primary_key => "league_id", :foreign_key => "league_id"
  has_many :divisions, :primary_key => "league_id", :foreign_key => "league_id"
  has_many :teams, :primary_key => "league_id", :foreign_key => "league_id"
  has_many :posts, :as => :postable, :order => "updated_at DESC"

  attr_accessor :password
  attr_accessible :name, :email, :password, :password_confirmation, :company_name, :league_id, :league_url

  email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  
  validates :name,  :presence => true,
                    :length   => { :maximum => 50 }
  validates :email, :presence => true,
                    :format   => { :with => email_regex },
                    :uniqueness => { :case_sensitive => false }
  validates :password, :presence     => true,
                       :confirmation => true,
                       :length       => { :within => 6..40 }

  before_save :encrypt_password
  cache = Hash.new

  def num_users_registered
    @users_registered = 0
    self.divisions.each { |t| @users_registered += t.users.count }
    @users_registered
  end  
  memoize :num_users_registered

  def has_password?(submitted_password)
    encrypted_password == encrypt(submitted_password)
  end

  def self.authenticate(email, submitted_password)
    admin = find_by_email(email)
    return nil  if admin.nil?
    return admin if admin.has_password?(submitted_password)
  end

  def self.authenticate_with_salt(id, cookie_salt)
    admin = find_by_id(id)
    (admin && admin.salt == cookie_salt) ? admin : nil
  end
  
  private

    def encrypt_password
      self.salt = make_salt unless has_password?(password)
      self.encrypted_password = encrypt(password)
    end

    def encrypt(string)
      secure_hash("#{salt}--#{string}")
    end

    def make_salt
      secure_hash("#{Time.now.utc}--#{password}")
    end

    def secure_hash(string)
      Digest::SHA2.hexdigest(string)
    end

end
